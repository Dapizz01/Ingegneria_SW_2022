Nello stesso path dei file .java:
>javac MainDemo.java
>java -classpath ".;sqlite-jdbc-3.27.2.1.jar" MainDemo.java su Windows
>java -classpath ".:sqlite-jdbc-3.27.2.1.jar" MainDemo.java su Linux/MAC

2.2. Date and Time Datatype
SQLite does not have a storage class set aside for storing dates and/or times. Instead, the built-in Date And Time Functions of SQLite are capable of storing dates and times as TEXT, REAL, or INTEGER values:

    TEXT as ISO8601 strings ("YYYY-MM-DD HH:MM:SS.SSS").
    REAL as Julian day numbers, the number of days since noon in Greenwich on November 24, 4714 B.C. according to the proleptic Gregorian calendar.
    INTEGER as Unix Time, the number of seconds since 1970-01-01 00:00:00 UTC.
Applications can choose to store dates and times in any of these formats and freely convert between formats using the built-in date and time functions.


            //------------------Selezione---------------
            stmt = c.createStatement();
            ResultSet rs = stmt.executeQuery( "SELECT * FROM Dipendenti;" );

            while ( rs.next() ) {
                int id_dipendente = rs.getInt("ID_Dipendente");
                String nome = rs.getString("Nome");
                String cognome  = rs.getString("Cognome");
                Date data_nascita = rs.getDate("Data_nascita");
                String n_telefono = rs.getString("N_telefono");
                String email = rs.getString("Email");
                String user = rs.getString("User");
                String password = rs.getString("Password");
                String comune_nascita = rs.getString("Comune_nascita");

                System.out.println( "ID_Dipendente = " + id_dipendente );
                System.out.println( "Nome = " + nome );
                System.out.println( "Cognome = " + cognome );
                System.out.println( "Data di nascita = " + data_nascita );
                System.out.println( "Numero di Telefono = " + n_telefono );
                System.out.println( "Email = " + email );
                System.out.println( "User = " + user);
                System.out.println( "Password = " + password );
                System.out.println( "Comune di nascita = " + comune_nascita );
                System.out.println();
            }
            rs.close();
            //----------------------------------------------------
            stmt.close();

                    /*
                    Scanner keyboard = new Scanner(System.in);
                    System.out.print("Inseirire user da cercare nel db: ");
                    String user = keyboard.nextLine();
                    System.out.print("Inseirire password da cercare nel db: ");
                    String password = keyboard.nextLine();

                    LoginDao loginDao = new LoginDaoImpl();
                    boolean v = loginDao.verificaLogin(new Login(user, password));

                    System.out.println("Risultato: " + v);

                    PatentiDao patentiDao = new PatentiDaoImpl();

                    for(Patente patente : patentiDao.getPatenti()) {
                        System.out.println("NomePatente: " + patente.getNomePatente());
                    }

                    LingueDao lingueDao = new LingueDaoImpl();

                    for(Lingua lingua : lingueDao.getLingue()) {
                        System.out.println("NomeLingua: " + lingua.getNomeLingua());
                    }

                    ComuniDao comuniDao = new ComuniDaoImpl();

                    for(Comune comune : comuniDao.getComuni()) {
                        System.out.println("NomeComune: " + comune.getNomeComune());
                    }

                    SpecializzazioniDao specializzazioniDao = new SpecializzazioniDaoImpl();

                    for(Specializzazione specializzazione : specializzazioniDao.getSpecializzazioni()) {
                        System.out.println("NomeSpecializzaione: " + specializzazione.getNomeSpecializzazione());
                    }

                    */

                                /*
                            Scanner keyboard = new Scanner(System.in);
                            System.out.print("Inserire NomeLavoratore da cercare nel db: ");
                            String nomeLavoratore = keyboard.nextLine();
                            System.out.print("Inserire e CognomeLavoratore da cercare nel db: ");
                            String cognomeLavoratore = keyboard.nextLine();

                            List<Lavoratore> lavoratoriCercati;
                            lavoratoriCercati = lavoratoriDao.getLavoratori(nomeLavoratore, cognomeLavoratore);

                            if (lavoratoriCercati.isEmpty())
                                System.out.println("Nessun lavoratore trovato con quel nome e cognome!");

                            for (Lavoratore lavoratore1 : lavoratoriCercati) {
                                System.out.println("ID_Lavoratore: " + lavoratore1.getID());
                                System.out.println("NomeLavoratore: " + lavoratore1.getNomeLavoratore());
                                System.out.println("ComuneNascita: " + lavoratore1.getComuneNascita().getNomeComune());
                                System.out.println();

                                System.out.println("Esperienze che ha fatto: ");
                                for (Esperienza esperienza : lavoratore1.getEsperienze()) {
                                    System.out.println("ID_Esperienza: " + esperienza.getID());
                                    System.out.println("NomeAzienda: " + esperienza.getNomeAzienda());
                                    System.out.println("NomeComune: " + esperienza.getComune().getNomeComune());
                                    System.out.println("Specializzazione: " + esperienza.getSpecializzazione().getNomeSpecializzazione());
                                }
                                System.out.println();

                                System.out.println("Contatti che possiede: ");
                                for (Contatto contatto : lavoratore1.getContatti()) {
                                    System.out.println("ID_Contatto: " + contatto.getID());
                                    System.out.println("NomeContatto: " + contatto.getNomeContatto());
                                }
                                System.out.println();

                                System.out.println("Lingue conosciute: ");
                                for (Lingua lingua : lavoratore1.getLingue()) {
                                    System.out.println("Nome Lingua: " + lingua.getNomeLingua());
                                }
                                System.out.println();

                                System.out.println("Patenti possedute: ");
                                for (Patente patente : lavoratore1.getPatenti()) {
                                    System.out.println("ID_Contatto: " + patente.getNomePatente());
                                }
                                System.out.println();

                                System.out.println("Le sue disponibilità: ");
                                for (Disponibilita disponibilita : lavoratore1.getDisponibilita()) {
                                    System.out.println("ID_Comune: " + disponibilita.getComune().getNomeComune());
                                    System.out.println("InizioPeriodo: " + disponibilita.getInizioPeriodo());
                                }
                                System.out.println();
                            }

                            */

                            /*
                            Scanner keyboard = new Scanner(System.iùn);
                            System.out.print("Inserire ID del lavoratore che si vuole eliminare dal db: ");
                            int id = keyboard.nextInt();
                            System.out.println("Lavoratore eliminato?: " + lavoratoriDao.deleteLavoratore(id));

                            prova();
                            */

                            /*
                            prova();

                            Lavoratore lavoratore3 = new Lavoratore(1,
                                    "Manuel",
                                    "De Marchi",
                                    comuniNelDb.get(3),
                                    comuniNelDb.get(2),
                                    5000,
                                    lingueNelDb.get(1),
                                    "mirko_demarchi@libero.it",
                                    "1834567823",
                                    true,
                                    esperienze2,
                                    lingueParlate2,
                                    contatti2,
                                    patentiPossedute2,
                                    disponibilitaLista2);
                            System.out.println("Lavoratore modificato?: " + lavoratoriDao.updateLavoratore(lavoratore3));

                            prova();
                            */

                                   /*
                                    Scanner keyboard = new Scanner(System.in);
                                    System.out.print("Inserire id del lavoratore da cercare nel db: ");
                                    int id = keyboard.nextInt();
                                    Lavoratore lavoratoreCercato = lavoratoriDao.getLavoratore(id);
                                    if(lavoratoreCercato != null) {
                                        System.out.println("ID_Lavoratore: " + lavoratoreCercato.getID());
                                        System.out.println("NomeLavoratore: " + lavoratoreCercato.getNomeLavoratore());
                                        System.out.println("ComuneNascita: " + lavoratoreCercato.getComuneNascita().getNomeComune());
                                        System.out.println();

                                        System.out.println("Esperienze che ha fatto: ");
                                        for (Esperienza esperienza : lavoratoreCercato.getEsperienze()) {
                                            System.out.println("ID_Esperienza: " + esperienza.getID());
                                            System.out.println("NomeAzienda: " + esperienza.getNomeAzienda());
                                            System.out.println("NomeComune: " + esperienza.getComune().getNomeComune());
                                            System.out.println("Specializzazione: " + esperienza.getSpecializzazione().getNomeSpecializzazione());
                                        }
                                        System.out.println();

                                        System.out.println("Contatti che possiede: ");
                                        for (Contatto contatto : lavoratoreCercato.getContatti()) {
                                            System.out.println("ID_Contatto: " + contatto.getID());
                                            System.out.println("NomeContatto: " + contatto.getNomeContatto());
                                        }
                                        System.out.println();

                                        System.out.println("Lingue conosciute: ");
                                        for (Lingua lingua : lavoratoreCercato.getLingue()) {
                                            System.out.println("Nome Lingua: " + lingua.getNomeLingua());
                                        }
                                        System.out.println();

                                        System.out.println("Patenti possedute: ");
                                        for (Patente patente : lavoratoreCercato.getPatenti()) {
                                            System.out.println("ID_Contatto: " + patente.getNomePatente());
                                        }
                                        System.out.println();

                                        System.out.println("Le sue disponibilità: ");
                                        for (Disponibilita disponibilita : lavoratoreCercato.getDisponibilita()) {
                                            System.out.println("ID_Comune: " + disponibilita.getComune().getNomeComune());
                                            System.out.println("InizioPeriodo: " + disponibilita.getInizioPeriodo());
                                        }
                                        System.out.println();
                                    }
                                    else
                                        System.out.println("L'ID cercato non esiste");
                                    */


                   ComuniDao comuniDao = new ComuniDaoImpl();
                    List<Comune> comuniNelDb = comuniDao.getComuni(); // Ritorna la lista dei comuni nel DB da 0=Bonavigo a 5=Casaleone
                    LingueDao lingueDao = new LingueDaoImpl();
                    List<Lingua> lingueNelDb = lingueDao.getLingue();
                    PatentiDao patentiDao = new PatentiDaoImpl();
                    List<Patente> patentiNelDb = patentiDao.getPatenti();
                    SpecializzazioniDao specializzazioniDao = new SpecializzazioniDaoImpl();
                    List<Specializzazione> specializzazioniNelDb = specializzazioniDao.getSpecializzazioni();

                    List<Esperienza> esperienze = new ArrayList<Esperienza>();
                    esperienze.add(new Esperienza(0, "NST", 50, 1000, 2000, comuniNelDb.get(0), specializzazioniNelDb.get(0)));
                    List<Lingua> lingueParlate = new ArrayList<Lingua>();
                    lingueParlate.add(lingueNelDb.get(0));
                    List<Contatto> contatti = new ArrayList<Contatto>();
                    contatti.add(new Contatto(0, "Maurizio", "Merluzzo", "1231234567", "merlu@gmail.com"));
                    List<Patente> patentiPossedute = new ArrayList<Patente>();
                    patentiPossedute.add(patentiNelDb.get(0));
                    List<Disponibilita> disponibilitaLista = new ArrayList<Disponibilita>();
                    disponibilitaLista.add(new Disponibilita(1000, 2000,comuniNelDb.get(0)));

                    LavoratoriDao lavoratoriDao = new LavoratoriDaoImpl();
                    Lavoratore lavoratore = new Lavoratore(0,
                            "Matteo",
                            "Cognome1",
                            comuniNelDb.get(5),
                            comuniNelDb.get(0),  // ComuneAbitazione: Bonavigo
                            200,
                            lingueNelDb.get(0),
                            "prova123@virgilio.it",
                            "1231231231",
                            true,
                            esperienze,         // Specializzazione: Bagnino
                            lingueParlate,      // Italiana
                            contatti,
                            patentiPossedute,    // AM
                            disponibilitaLista); //1000-2000
                    System.out.println("Primo lavoratore inserito?: " + lavoratoriDao.addLavoratore(lavoratore));

                    List<Contatto> contatti2 = new ArrayList<Contatto>();
                    contatti2.add(new Contatto(0, "Contattino", "Merlu", "1231234567", "merlu@gmail.com"));
                    contatti2.add(new Contatto(0, "Contattone", "Merlo", "1231234567", "merlu@gmail.com"));
                    List<Lingua> lingueParlate2 = new ArrayList<Lingua>();
                    lingueParlate2.add(lingueNelDb.get(0));
                    lingueParlate2.add(lingueNelDb.get(1));
                    List<Patente> patentiPossedute2 = new ArrayList<Patente>();
                    patentiPossedute2.add(patentiNelDb.get(0));
                    patentiPossedute2.add(patentiNelDb.get(1));
                    List<Disponibilita> disponibilitaLista2 = new ArrayList<Disponibilita>();
                    disponibilitaLista2.add(new Disponibilita(1500, 4000, comuniNelDb.get(0)));
                    disponibilitaLista2.add(new Disponibilita(7000, 9000, comuniNelDb.get(1)));
                    List<Esperienza> esperienze2 = new ArrayList<Esperienza>();
                    esperienze2.add(new Esperienza(0, "AIA", 50, 1000, 2000, comuniNelDb.get(3), specializzazioniNelDb.get(0)));
                    esperienze2.add(new Esperienza(0, "DBD", 80, 2000, 3000, comuniNelDb.get(3), specializzazioniNelDb.get(1)));

                    Lavoratore lavoratore2 = new Lavoratore(0,
                            "Mirko",
                            "Cognome2",
                            comuniNelDb.get(2),
                            comuniNelDb.get(1),  //Minerbe
                            1000,
                            lingueNelDb.get(1),
                            "mirko_demarchi@libero.it",
                            "1834567823",
                            false,
                            esperienze2,
                            lingueParlate2,
                            contatti2,
                            patentiPossedute2,
                            disponibilitaLista2);
                    System.out.println("Secondo lavoratore inserito?: " + lavoratoriDao.addLavoratore(lavoratore2));


                    //prova();

                    // ------------------------------------Ignored
                    List<Lingua> lingueVuota = new ArrayList<>();
                    List<Comune> comuniVuota = new ArrayList<>();
                    List<Patente> patentiVuota = new ArrayList<>();
                    List<Specializzazione> specializzazioniVuota = new ArrayList<>();

                    LingueFilter lingueFilterVuota = new LingueFilter(lingueVuota, Flag.OR);
                    ComuniFilter comuniFilterVuota = new ComuniFilter(comuniVuota, Flag.AND);
                    PatentiFilter patentiFilterVuota = new PatentiFilter(patentiVuota, Flag.OR);
                    SpecializzazioniFilter specializzazioniFilterVuota = new SpecializzazioniFilter(specializzazioniVuota, Flag.OR);
                    AutomunitoFilter automunitoFilterFalse = new AutomunitoFilter(false); // sia automuniti che non
                    DisponibilitaFilter disponibilitaFilterVuota = new DisponibilitaFilter(-1,-1, comuniNelDb.get(0));
                    DataNascitaFilter dataNascitaFilterVuota = new DataNascitaFilter(-1,Flag.OR);
                    // ------------------------------------------

                    List<Lingua> lingueDacercare = new ArrayList<>();
                    lingueDacercare.add(lingueNelDb.get(0)); // Italiana
                    lingueDacercare.add(lingueNelDb.get(1)); // Inglese
                    List<Comune> comuniDacercare = new ArrayList<>();
                    comuniDacercare.add(comuniNelDb.get(0)); // Bonavigo
                    comuniDacercare.add(comuniNelDb.get(1)); // Minerbe
                    List<Specializzazione> specializzazioniDacercare = new ArrayList<>();
                    specializzazioniDacercare.add(specializzazioniNelDb.get(0));
                    specializzazioniDacercare.add(specializzazioniNelDb.get(1));
                    List<Patente> patentiDacercare = new ArrayList<>();
                    patentiDacercare.add(patentiNelDb.get(0));
                    patentiDacercare.add(patentiNelDb.get(1));

                    LingueFilter lingueFilterAND = new LingueFilter(lingueDacercare, Flag.AND);
                    LingueFilter lingueFilterOR = new LingueFilter(lingueDacercare, Flag.OR);
                    ComuniFilter comuniFilterAND = new ComuniFilter(comuniDacercare, Flag.AND);
                    ComuniFilter comuniFilterOR = new ComuniFilter(comuniDacercare, Flag.OR);
                    PatentiFilter patentiFilterAND = new PatentiFilter(patentiDacercare, Flag.AND);
                    PatentiFilter patentiFilterOR = new PatentiFilter(patentiDacercare, Flag.AND);


                    SpecializzazioniFilter specializzazioniFilterOR = new SpecializzazioniFilter(specializzazioniDacercare, Flag.OR);
                    DisponibilitaFilter disponibilitaFilterBonavigo = new DisponibilitaFilter(999,2001,comuniNelDb.get(0));
                    AutomunitoFilter automunitoFilterTrue = new AutomunitoFilter(true);
                    DataNascitaFilter dataNascitaFilterFROM = new DataNascitaFilter(201,Flag.FROM);
                    DataNascitaFilter dataNascitaFilterTO = new DataNascitaFilter(3000,Flag.TO);

                    List<Lavoratore> lavoratoriCercati;

                    lavoratoriCercati = lavoratoriDao.searchLavoratori(lingueFilterVuota,comuniFilterVuota,patentiFilterVuota,specializzazioniFilterVuota,automunitoFilterFalse, disponibilitaFilterVuota, dataNascitaFilterFROM, Flag.OR);
                    System.out.println("Ricerca Automuniti e patenti ");
                    stampaRicerca(lavoratoriCercati);
                }

                public static void prova() { // Per vedere cosa contengono tutte le tabelle del DB
                    Connection c = null;
                    Statement stmt = null;

                    try {
                        Class.forName("org.sqlite.JDBC");
                        // -------------Connessione database-----------------
                        c = DriverManager.getConnection("jdbc:sqlite:LavoratoriStagionali.db");
                        System.out.println("Opened database successfully<Prova>");
                        //------------------------------------------------

                        //------------------Selezione---------------
                        c.setAutoCommit(false);

                        stmt = c.createStatement();
                        ResultSet rs = stmt.executeQuery("SELECT * FROM Lavoratori;");

                        while (rs.next()) {
                            int idLavoratore = rs.getInt("ID_Lavoratore");
                            String nomeLavoratore = rs.getString("NomeLavoratore");
                            String nazionalita = rs.getString("Nazionalita");
                            String comuneNascita = rs.getString("ComuneNascita");
                            String comuneAbitazione = rs.getString("ComuneAbitazione");
                            boolean automunito = rs.getBoolean("Automunito");


                            System.out.println("ID_Lavoratore: " + idLavoratore);
                            System.out.println("NomeLavoratore: " + nomeLavoratore);
                            System.out.println("Nazionalità: " + nazionalita);
                            System.out.println("ComuneNascita: " + comuneNascita);
                            System.out.println("ComuneAbitazione: " + comuneAbitazione);
                            System.out.println("Automunito: " + automunito);
                        }
                        rs.close();


                        rs = stmt.executeQuery("SELECT * FROM Esperienze;");
                        while (rs.next()) {
                            int idLavoratore = rs.getInt("ID_Lavoratore");
                            int idEsperienza = rs.getInt("ID_Esperienza");
                            String nomeAzienda = rs.getString("NomeAzienda");
                            String nomeComune = rs.getString("NomeComune");
                            String nomeSpecializzazione = rs.getString("NomeSpecializzazione");

                            System.out.println("ID_Lavoratore: " + idLavoratore);
                            System.out.println("ID_Esperienza: " + idEsperienza);
                            System.out.println("NomeAzienda: " + nomeAzienda);
                            System.out.println("Svolta in: " + nomeComune);
                            System.out.println("Specializzato in: " + nomeSpecializzazione);
                        }
                        rs.close();

                        rs = stmt.executeQuery("SELECT * FROM LingueParlate;");
                        while (rs.next()) {
                            int idLavoratore = rs.getInt("ID_Lavoratore");
                            String nomeLingua = rs.getString("NomeLingua");

                            System.out.println("ID_Lavoratore: " + idLavoratore);
                            System.out.println("Lingua Parlata: " + nomeLingua);
                        }
                        rs.close();

                        rs = stmt.executeQuery("SELECT * FROM Contatti;");
                        while (rs.next()) {
                            int idLavoratore = rs.getInt("ID_Lavoratore");
                            int idContatto = rs.getInt("ID_Contatto");
                            String nomeContatto = rs.getString("NomeContatto");

                            System.out.println("ID_Lavoratore: " + idLavoratore);
                            System.out.println("ID_Contatto: " + idContatto);
                            System.out.println("nomeContatto: " + nomeContatto);
                        }
                        rs.close();

                        rs = stmt.executeQuery("SELECT * FROM PatentiPossedute;");
                        while (rs.next()) {
                            int idLavoratore = rs.getInt("ID_Lavoratore");
                            String nomePatente = rs.getString("NomePatente");

                            System.out.println("ID_Lavoratore: " + idLavoratore);
                            System.out.println("Patente Posseduta: " + nomePatente);
                        }
                        rs.close();

                        rs = stmt.executeQuery("SELECT * FROM Disponibilita;");
                        while (rs.next()) {
                            int idLavoratore = rs.getInt("ID_Lavoratore");
                            String nomeComune = rs.getString("NomeComune");
                            int inizioPeriodo = rs.getInt("InizioPeriodo");
                            int finePeriodo = rs.getInt("FinePeriodo");

                            System.out.println("ID_Lavoratore " + idLavoratore);
                            System.out.println("Da disponibilià nel comune: " + nomeComune);
                            System.out.println("Da: " + inizioPeriodo);
                            System.out.println("A: " + finePeriodo);

                        }
                        rs.close();

                        System.out.println("Gli automuniti sono: ");
                        stmt = c.createStatement();
                        rs = stmt.executeQuery("SELECT ID_Lavoratore FROM Lavoratori WHERE Automunito = TRUE;");
                        while (rs.next()) {
                            int idLavoratore = rs.getInt("ID_Lavoratore");

                            System.out.println("ID_Lavoratore: " + idLavoratore);
                        }
                        rs.close();
                        //-------------------------------------------------------

                        stmt.close();
                        c.close();


                    } catch (Exception e) {
                        System.err.println(e.getClass().getName() + ": " + e.getMessage());
                        System.exit(0);
                    }
                }

                public static void stampaRicerca(List<Lavoratore> lavoratoriCercati) {
                    if (lavoratoriCercati.isEmpty())
                        System.out.println("Nessun lavoratore trovato!");

                    for (Lavoratore lavoratore1 : lavoratoriCercati) {
                        System.out.println("ID_Lavoratore: " + lavoratore1.getID());
                        System.out.println("NomeLavoratore: " + lavoratore1.getNomeLavoratore());
                        System.out.println("ComuneNascita: " + lavoratore1.getComuneNascita().getNomeComune());
                        System.out.println();


                        System.out.println("Esperienze che ha fatto: ");
                        for (Esperienza esperienza : lavoratore1.getEsperienze()) {
                            System.out.println("ID_Esperienza: " + esperienza.getID());
                            System.out.println("NomeAzienda: " + esperienza.getNomeAzienda());
                            System.out.println("NomeComune: " + esperienza.getComune().getNomeComune());
                            System.out.println("Specializzazione: " + esperienza.getSpecializzazione().getNomeSpecializzazione());
                        }
                        System.out.println();

                        System.out.println("Contatti che possiede: ");
                        for (Contatto contatto : lavoratore1.getContatti()) {
                            System.out.println("ID_Contatto: " + contatto.getID());
                            System.out.println("NomeContatto: " + contatto.getNomeContatto());
                        }
                        System.out.println();

                        System.out.println("Lingue conosciute: ");
                        for (Lingua lingua : lavoratore1.getLingue()) {
                            System.out.println("Nome Lingua: " + lingua.getNomeLingua());
                        }
                        System.out.println();

                        System.out.println("Patenti possedute: ");
                        for (Patente patente : lavoratore1.getPatenti()) {
                            System.out.println("ID_Contatto: " + patente.getNomePatente());
                        }
                        System.out.println();

                        System.out.println("Le sue disponibilità: ");
                        for (Disponibilita disponibilita : lavoratore1.getDisponibilita()) {
                            System.out.println("ID_Comune: " + disponibilita.getComune().getNomeComune());
                            System.out.println("InizioPeriodo: " + disponibilita.getInizioPeriodo());
                        }
                        System.out.println();


                    }
                }